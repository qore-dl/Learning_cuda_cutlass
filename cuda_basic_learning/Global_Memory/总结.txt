CUDA 编程模型的一个显著特点是有对程序员直接可用的 GPU 内存层次结构。
这对数据移动和布局提供了更多的控制，优化了性能并得到了更高的峰值性能。

global memory 是最大的、延迟最高的、最常用的内存。对global memory的请求可以由32个字节或128个字节的事务来完成的。
记住这些特点和粒度对于调控应用程序中全局内存的使用是很重要的。

通过本章的示例，我们学习了以下两种提高带宽利用率的方法：
1. 最大化当前并发内存访问的次数。
2. 最大化在总线上的全局内存和 SM 片上内存之间移动字节的利用率。

为保持有足够多的正在执行的内存操作，可以使用展开技术在每个线程中创建更多的独立内存请求，
或调整网格和线程块的执行配置来体现充分的 SM 并行性。

为了避免在设备内存和片上内存之间有未使用数据的移动，应该努力实现理想的访问模式：对齐和合并内存访问。

对齐内存访问相对容易，但有时合并访问比较有挑战性。一些算法本身就无法合并访问，或实现起来有一定的困难。

改进合并访问的重点在于线程束中的访问模式。另一方面，消除分区冲突的重点则在于所有活跃线程束之间的访问模式。
对角坐标映射是一种通过调整块执行顺序来避免分区冲突的方法。

通过消除重复指针以及在主机和设备之间显式地传输数据的需要，统一内存机制大大简化了 CUDA 编程。
CUDA 6.0 及以后的统一内存的实现明显地保持了性能的一致性和优越性。未来硬件和软件的提升将会提高统一内存的性能。

下一章将详细介绍在本章中简要提到的两个话题：常量内存和共享内存（constant memory and shared memory）
